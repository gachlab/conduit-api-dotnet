// <auto-generated />
using System;
using Conduit.Sql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Conduit.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220306220532_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<string>("articlesslug")
                        .HasColumnType("TEXT");

                    b.Property<string>("tagListname")
                        .HasColumnType("TEXT");

                    b.HasKey("articlesslug", "tagListname");

                    b.HasIndex("tagListname");

                    b.ToTable("ArticleTag");
                });

            modelBuilder.Entity("Conduit.Sql.Article", b =>
                {
                    b.Property<string>("slug")
                        .HasColumnType("TEXT");

                    b.Property<string>("authorusername")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("body")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("slug");

                    b.HasIndex("authorusername");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Conduit.Sql.Tag", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("name");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Conduit.Sql.User", b =>
                {
                    b.Property<string>("username")
                        .HasColumnType("TEXT");

                    b.Property<string>("bio")
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("image")
                        .HasColumnType("TEXT");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("token")
                        .HasColumnType("TEXT");

                    b.HasKey("username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("Conduit.Sql.Article", null)
                        .WithMany()
                        .HasForeignKey("articlesslug")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conduit.Sql.Tag", null)
                        .WithMany()
                        .HasForeignKey("tagListname")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conduit.Sql.Article", b =>
                {
                    b.HasOne("Conduit.Sql.User", "author")
                        .WithMany()
                        .HasForeignKey("authorusername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");
                });
#pragma warning restore 612, 618
        }
    }
}
